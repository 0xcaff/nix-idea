name: Prepare Release

on:
  push:
    branches: [ 'master' ]
  workflow_dispatch:
    inputs: {}

jobs:
  build:

    name: Update drafts for GitHub releases
    runs-on: ubuntu-latest

    steps:
    # Remove old release drafts
    - name: Remove old release drafts
      uses: actions/github-script@v3
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const response = await github.repos.listReleases({owner, repo});
          for (const draft of response.data.filter(r => r.draft)) {
            core.info(`Delete draft for '${draft.name}' (${draft.id})`);
            await github.repos.deleteRelease({owner, repo, release_id: draft.id});
          }
    # Setup environment
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    # Setup cache
    - name: Setup cache for Gradle and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: "gradle-\
          ${{runner.os}}-\
          ${{hashFiles('gradle/wrapper/gradle-wrapper.properties')}}-\
          ${{hashFiles('gradle.properties', '**/*.gradle.kts')}}"
    # Build
    - name: Build plugin
      id: gradle-build
      run: ./gradlew --stacktrace verifyPlugin build metadata
    # Upload artifacts
    - name: Upload build reports
      if: steps.gradle-build.outcome == 'success' || steps.gradle-build.outcome == 'failure'
      uses: actions/upload-artifact@v2
      with:
        name: build-reports
        path: build/reports/
        if-no-files-found: ignore
    - name: Upload build result
      uses: actions/upload-artifact@v2
      with:
        name: build-result
        path: build/distributions/
        if-no-files-found: error
    # Read metadata
    - name: Read metadata
      id: metadata
      run: |
        echo "::set-output name=version::$(cat build/metadata/version.txt)"
        echo "::set-output name=zipfile::$(cat build/metadata/zipfile.txt)"
        echo "::set-output name=zipname::$(basename "$(cat build/metadata/zipfile.txt)")"
    # Fail job if the release tag already exists and points to a different commit
    - name: Check release tag
      run: |
        tag_name="v$(cat build/metadata/version.txt)"
        if \
          git fetch --depth=1 origin tag "$tag_name" && \
          [ "$(git rev-parse "$tag_name")" != "$(git rev-parse HEAD)" ]
        then
          msg="Tag '$tag_name' already exists but points to a different commit."
          msg="$msg You probably need to bump the version number."
          echo "::error::$msg"
          exit 1
        fi
    # Create GitHub release draft
    - name: Create GitHub release draft
      uses: actions/create-release@v1
      id: create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.metadata.outputs.version }}
        release_name: v${{ steps.metadata.outputs.version }}
        body_path: ./build/metadata/latest_changelog.md
        draft: true
    - name: Upload asset for GitHub release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{ steps.metadata.outputs.zipfile }}
        asset_name: ${{ steps.metadata.outputs.zipname }}
        asset_content_type: application/zip
