/* The following code was generated by JFlex 1.4.3 on 28/02/15 9:53 PM */

package cc.cflags.nixitch.lang;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static cc.cflags.nixitch.psi.NixTypes.*;


public class NixLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int IND_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\70\1\51\1\25"+
    "\1\4\1\22\1\35\1\47\1\26\1\37\1\40\1\6\1\52\1\53"+
    "\1\33\1\27\1\5\12\7\1\34\1\46\1\30\1\36\1\31\1\44"+
    "\1\45\12\20\1\67\3\20\1\65\7\20\1\66\3\20\1\42\1\24"+
    "\1\43\1\0\1\21\1\0\1\15\1\20\1\60\1\20\1\13\1\14"+
    "\1\20\1\55\1\54\2\20\1\16\1\63\1\56\1\61\1\64\1\62"+
    "\1\11\1\17\1\10\1\12\1\20\1\57\3\20\1\23\1\50\1\41"+
    "\1\32\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\7\7"+
    "\1\1\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\1\1\31\1\32\1\33"+
    "\4\7\1\34\2\35\1\36\1\37\1\35\1\40\1\41"+
    "\1\0\1\42\2\0\3\7\2\0\6\7\1\43\1\44"+
    "\2\0\1\45\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\7\1\57\1\7\1\0"+
    "\1\60\2\0\1\61\1\62\1\0\1\7\1\63\1\7"+
    "\1\64\4\7\1\65\1\44\1\0\1\66\1\0\1\67"+
    "\1\70\4\7\1\71\1\72\1\37\1\73\1\74\1\75"+
    "\1\7\1\76\3\7\1\77\5\7\1\100\1\7\1\101"+
    "\1\7\1\102\1\103\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\253"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\253\0\253\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\253\0\u051f\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\253\0\253\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\253\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\253"+
    "\0\253\0\u0792\0\u07cb\0\u0804\0\253\0\u083d\0\u0876\0\u08af"+
    "\0\u0357\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\253\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\253\0\253\0\u0c06\0\253\0\253\0\253\0\253\0\253"+
    "\0\u0357\0\u023a\0\u0c3f\0\u0c78\0\u0cb1\0\u023a\0\u0cea\0\u0d23"+
    "\0\253\0\u0d5c\0\u0d95\0\253\0\u0dce\0\u0e07\0\u0e40\0\u09cc"+
    "\0\u0e79\0\u023a\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u023a\0\253"+
    "\0\u0b5b\0\u0357\0\u0f96\0\253\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\253\0\253\0\253\0\253\0\u023a\0\u023a\0\u10ec"+
    "\0\u023a\0\u1125\0\u115e\0\u1197\0\u023a\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u0921\0\u12ed\0\u023a\0\u1326\0\u135f\0\u1398"+
    "\0\u023a\0\u023a\0\u023a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\14\1\21\1\22"+
    "\1\23\1\4\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\4\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\14\1\53\1\14\1\54\3\14\1\55"+
    "\2\14\1\5\22\56\1\57\1\56\1\60\1\61\43\56"+
    "\22\62\1\63\3\62\1\64\42\62\72\0\3\5\64\0"+
    "\1\5\1\6\2\0\66\6\5\0\1\65\1\66\13\67"+
    "\5\0\1\67\3\0\1\67\16\0\1\67\1\0\14\67"+
    "\6\0\1\70\1\0\1\11\12\71\5\0\1\71\3\0"+
    "\1\71\16\0\1\71\1\0\14\71\6\0\1\70\1\0"+
    "\2\14\1\72\7\14\1\73\4\0\1\74\1\75\3\0"+
    "\1\14\1\76\15\0\1\75\1\0\1\14\1\77\12\14"+
    "\6\0\1\70\1\0\4\14\1\100\5\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\6\0\1\70\1\0\12\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\7\14\1\101\2\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\6\0\1\70\1\0\6\14\1\102\3\14\1\73"+
    "\4\0\1\74\1\75\3\0\1\14\1\76\15\0\1\75"+
    "\1\0\14\14\6\0\1\70\1\0\10\14\1\103\1\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\14\14\6\0\1\70\1\0\4\14\1\104"+
    "\5\14\1\73\4\0\1\74\1\75\3\0\1\14\1\76"+
    "\15\0\1\75\1\0\14\14\6\0\1\70\1\0\13\71"+
    "\5\0\1\71\3\0\1\71\16\0\1\71\1\0\14\71"+
    "\24\0\1\105\73\0\1\106\47\0\1\70\1\0\13\71"+
    "\5\0\1\107\3\0\1\71\16\0\1\71\1\0\14\71"+
    "\10\0\13\110\5\0\1\110\3\0\1\110\2\0\1\111"+
    "\13\0\1\110\1\0\14\110\37\0\1\112\37\0\1\113"+
    "\70\0\1\70\1\0\13\71\5\0\1\71\1\0\1\114"+
    "\1\0\1\71\16\0\1\71\1\0\14\71\37\0\1\115"+
    "\101\0\1\116\71\0\1\117\56\0\1\120\37\0\1\70"+
    "\1\0\13\71\5\0\1\71\3\0\1\71\16\0\1\121"+
    "\1\0\14\71\6\0\1\70\1\0\5\14\1\122\4\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\2\14\1\123\4\14\1\124\4\14\6\0"+
    "\1\70\1\0\12\14\1\73\4\0\1\74\1\75\3\0"+
    "\1\14\1\76\15\0\1\75\1\0\1\125\13\14\6\0"+
    "\1\70\1\0\2\14\1\126\7\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\12\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\12\14\1\127"+
    "\1\14\1\0\22\56\1\130\1\56\2\0\66\56\1\131"+
    "\1\56\1\0\43\56\22\62\1\132\3\62\1\133\65\62"+
    "\1\134\2\62\1\0\64\62\1\0\3\62\1\135\42\62"+
    "\6\66\1\136\62\66\5\0\1\70\1\0\13\67\5\0"+
    "\1\67\3\0\1\67\16\0\1\67\1\0\14\67\10\0"+
    "\13\67\5\0\1\67\3\0\1\67\16\0\1\67\1\0"+
    "\14\67\6\0\1\70\1\0\3\14\1\137\6\14\1\73"+
    "\4\0\1\74\1\75\3\0\1\14\1\76\15\0\1\75"+
    "\1\0\14\14\6\0\1\70\1\0\13\73\4\0\1\74"+
    "\1\71\3\0\1\73\16\0\1\71\1\0\14\73\10\0"+
    "\13\74\4\0\1\74\4\0\1\74\20\0\14\74\6\0"+
    "\1\70\1\0\12\75\1\71\5\0\1\75\3\0\1\75"+
    "\1\76\15\0\1\75\1\0\14\75\6\0\16\140\3\0"+
    "\2\140\2\0\5\140\5\0\2\140\1\0\1\140\1\0"+
    "\17\140\6\0\1\70\1\0\4\14\1\141\5\14\1\73"+
    "\4\0\1\74\1\75\3\0\1\14\1\76\15\0\1\75"+
    "\1\0\14\14\6\0\1\70\1\0\12\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\4\14\1\142\1\14\1\143\5\14\6\0\1\70\1\0"+
    "\10\14\1\144\1\14\1\73\4\0\1\74\1\75\3\0"+
    "\1\14\1\76\15\0\1\75\1\0\14\14\6\0\1\70"+
    "\1\0\7\14\1\145\2\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\14\14\6\0"+
    "\1\70\1\0\10\14\1\146\1\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\1\14\1\147\10\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\3\0\1\150\65\0\1\151\5\0\1\70\1\0"+
    "\13\71\5\0\1\152\3\0\1\71\16\0\1\71\1\0"+
    "\14\71\6\0\1\153\1\0\13\110\5\0\1\110\1\0"+
    "\1\154\1\0\1\110\16\0\1\110\1\0\14\110\10\0"+
    "\13\155\5\0\1\155\3\0\1\155\16\0\1\155\1\0"+
    "\14\155\6\0\1\70\1\0\12\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\1\14"+
    "\1\156\12\14\6\0\1\70\1\0\12\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\10\14\1\157\3\14\6\0\1\70\1\0\1\14\1\160"+
    "\10\14\1\73\4\0\1\74\1\75\3\0\1\14\1\76"+
    "\15\0\1\75\1\0\14\14\6\0\1\70\1\0\12\14"+
    "\1\161\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\14\14\1\0\23\56\1\0\1\56\1\0"+
    "\43\56\23\62\1\0\2\62\1\0\64\62\1\0\3\62"+
    "\1\0\42\62\22\0\1\162\3\0\1\163\1\164\41\0"+
    "\5\66\1\165\63\66\5\0\1\70\1\0\4\14\1\166"+
    "\5\14\1\73\4\0\1\74\1\75\3\0\1\14\1\76"+
    "\15\0\1\75\1\0\14\14\6\0\1\70\1\0\12\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\2\14\1\167\11\14\6\0\1\70\1\0"+
    "\3\14\1\170\6\14\1\73\4\0\1\74\1\75\3\0"+
    "\1\14\1\76\15\0\1\75\1\0\14\14\6\0\1\70"+
    "\1\0\4\14\1\171\5\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\14\14\6\0"+
    "\1\70\1\0\10\14\1\137\1\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\4\14\1\172\5\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\10\0\13\110\5\0\1\110\3\0\1\110\16\0"+
    "\1\110\1\0\14\110\6\0\1\113\1\0\13\155\5\0"+
    "\1\155\3\0\1\155\16\0\1\155\1\0\14\155\6\0"+
    "\1\70\1\0\4\14\1\173\5\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\12\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\5\14\1\174"+
    "\6\14\6\0\1\70\1\0\12\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\1\14"+
    "\1\175\12\14\6\0\1\70\1\0\13\73\4\0\1\74"+
    "\1\71\3\0\1\73\16\0\1\71\1\0\13\73\1\176"+
    "\6\0\1\70\1\0\12\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\1\177\13\14"+
    "\6\0\1\70\1\0\2\14\1\200\7\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\6\0\1\70\1\0\2\14\1\201\7\14\1\73"+
    "\4\0\1\74\1\75\3\0\1\14\1\76\15\0\1\75"+
    "\1\0\14\14\6\0\1\70\1\0\2\14\1\202\7\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\14\14\6\0\1\70\1\0\13\73\4\0"+
    "\1\74\1\71\3\0\1\73\16\0\1\71\1\0\12\73"+
    "\1\203\1\73\6\0\1\70\1\0\2\14\1\204\7\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\14\14\6\0\1\70\1\0\1\14\1\205"+
    "\10\14\1\73\4\0\1\74\1\75\3\0\1\14\1\76"+
    "\15\0\1\75\1\0\14\14\6\0\1\70\1\0\12\14"+
    "\1\73\4\0\1\74\1\75\3\0\1\14\1\76\15\0"+
    "\1\75\1\0\1\206\13\14\6\0\1\70\1\0\1\14"+
    "\1\207\10\14\1\73\4\0\1\74\1\75\3\0\1\14"+
    "\1\76\15\0\1\75\1\0\14\14\6\0\1\70\1\0"+
    "\4\14\1\210\5\14\1\73\4\0\1\74\1\75\3\0"+
    "\1\14\1\76\15\0\1\75\1\0\14\14\6\0\1\70"+
    "\1\0\1\14\1\211\10\14\1\73\4\0\1\74\1\75"+
    "\3\0\1\14\1\76\15\0\1\75\1\0\14\14\6\0"+
    "\1\70\1\0\10\14\1\212\1\14\1\73\4\0\1\74"+
    "\1\75\3\0\1\14\1\76\15\0\1\75\1\0\14\14"+
    "\6\0\1\70\1\0\10\14\1\213\1\14\1\73\4\0"+
    "\1\74\1\75\3\0\1\14\1\76\15\0\1\75\1\0"+
    "\14\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5073];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\12\1\2\11\6\1\1\11"+
    "\1\1\10\11\4\1\1\11\6\1\2\11\3\1\1\11"+
    "\1\0\1\1\2\0\3\1\2\0\6\1\1\11\1\1"+
    "\2\0\2\11\1\0\5\11\7\1\1\0\1\11\2\0"+
    "\1\11\1\1\1\0\11\1\1\11\1\0\1\1\1\0"+
    "\1\11\5\1\4\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public NixLexer() {
    this((java.io.Reader)null);
  }

  enum StrState { IN_STRING, IN_IND_STRING };

  private Stack<StrState> interpol;
  public CharSequence yylval_id, yylval_path, yylval_uri, yylval_expr;
  public void backToString() { yybegin(STRING); }
  public void backToIndString() { yybegin(IND_STRING); }

  public synchronized void assureInterpol() {
    if(interpol == null)
        interpol = new Stack<StrState>();
  }
  public synchronized void showState() {
    try {
      p(peek().toString());
    } catch (Exception e) {p("OUTSIDE");}
  }
  public synchronized void push(StrState sst) {
    assureInterpol();
    interpol.push(sst);
  }
  public synchronized StrState pop() throws Exception {
    assureInterpol();
    return interpol.pop();
  }
  public synchronized StrState peek() throws Exception {
    assureInterpol();
    return interpol.peek();
  };
  public void ps(String msg) {p(msg);showState();}
  public static void p(String msg) { System.out.println(msg);}



  public NixLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public NixLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8:
          { return DOLLAR;
          }
        case 71: break;
        case 45:
          { return IF;
          }
        case 72: break;
        case 55:
          { yylval_path=yytext();return SPATH;
          }
        case 73: break;
        case 10:
          { yybegin(STRING);return FNUTT;
          }
        case 74: break;
        case 39:
          { return IMPL;
          }
        case 75: break;
        case 12:
          { return LT;
          }
        case 76: break;
        case 51:
          { yylval_uri=yytext();return URI;
          }
        case 77: break;
        case 44:
          { return CONCAT;
          }
        case 78: break;
        case 32:
          { yylval_expr = "'";
        return IND_STR;
          }
        case 79: break;
        case 47:
          { return OR_KW;
          }
        case 80: break;
        case 49:
          { yybegin(YYINITIAL);
        push(StrState.IN_IND_STRING);
        return DOLLAR_CURLY;
          }
        case 81: break;
        case 19:
          { try {
      StrState st = pop();
      if(st == StrState.IN_STRING) {
        backToString();
      } else if (st == StrState.IN_IND_STRING) {
        backToIndString();
      }
    } catch (Exception e){}
    return RCURLY;
          }
        case 82: break;
        case 59:
          { return MCOMMENT;
          }
        case 83: break;
        case 54:
          { return ELLIPSIS;
          }
        case 84: break;
        case 9:
          { return LCURLY;
          }
        case 85: break;
        case 33:
          { return UPDATE;
          }
        case 86: break;
        case 20:
          { return LBRAC;
          }
        case 87: break;
        case 68:
          { return INHERIT;
          }
        case 88: break;
        case 30:
          { yybegin(YYINITIAL);
        return FNUTT;
          }
        case 89: break;
        case 27:
          { return COMMA;
          }
        case 90: break;
        case 56:
          { yylval_path=yytext();return HPATH;
          }
        case 91: break;
        case 11:
          { return DOT;
          }
        case 92: break;
        case 46:
          { return IN;
          }
        case 93: break;
        case 42:
          { return OR;
          }
        case 94: break;
        case 24:
          { return SEMI;
          }
        case 95: break;
        case 21:
          { return RBRAC;
          }
        case 96: break;
        case 70:
          { return REQUIRES;
          }
        case 97: break;
        case 67:
          { return REQUIRE;
          }
        case 98: break;
        case 63:
          { return WITH;
          }
        case 99: break;
        case 15:
          { return COLON;
          }
        case 100: break;
        case 41:
          { return AND;
          }
        case 101: break;
        case 25:
          { return NOT;
          }
        case 102: break;
        case 66:
          { return IMPORT;
          }
        case 103: break;
        case 34:
          { yylval_path=yytext();return PATH;
          }
        case 104: break;
        case 7:
          { yylval_id=yytext();return ID;
          }
        case 105: break;
        case 57:
          { yylval_expr = "$";
        return IND_STR;
          }
        case 106: break;
        case 16:
          { return ASSIGN;
          }
        case 107: break;
        case 6:
          { return INT;
          }
        case 108: break;
        case 43:
          { return NEQ;
          }
        case 109: break;
        case 65:
          { return ASSERT;
          }
        case 110: break;
        case 61:
          { return THEN;
          }
        case 111: break;
        case 58:
          { yylval_expr = "''";
        return IND_STR;
          }
        case 112: break;
        case 31:
          { yylval_expr = yytext();
        return IND_STR;
          }
        case 113: break;
        case 13:
          { return GT;
          }
        case 114: break;
        case 62:
          { return ELSE;
          }
        case 115: break;
        case 29:
          { zzBufferL=yytext();
          }
        case 116: break;
        case 38:
          { return GEQ;
          }
        case 117: break;
        case 3:
          { return SCOMMENT;
          }
        case 118: break;
        case 14:
          { return MINUS;
          }
        case 119: break;
        case 22:
          { return IS;
          }
        case 120: break;
        case 64:
          { return OW_KW;
          }
        case 121: break;
        case 37:
          { return LEQ;
          }
        case 122: break;
        case 69:
          { return IMPORTS;
          }
        case 123: break;
        case 23:
          { return NAMED;
          }
        case 124: break;
        case 53:
          { return LET;
          }
        case 125: break;
        case 5:
          { return TIMES;
          }
        case 126: break;
        case 52:
          { return REC;
          }
        case 127: break;
        case 48:
          { yybegin(YYINITIAL);
        push(StrState.IN_STRING);
        return DOLLAR_CURLY;
          }
        case 128: break;
        case 28:
          { yylval_expr=yytext();
        return STR;
          }
        case 129: break;
        case 2:
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 35:
          { return DOLLAR_CURLY;
          }
        case 131: break;
        case 4:
          { return DIVIDE;
          }
        case 132: break;
        case 50:
          { yybegin(YYINITIAL);
        return IND_STRING_CLOSE;
          }
        case 133: break;
        case 17:
          { return LPAREN;
          }
        case 134: break;
        case 18:
          { return RPAREN;
          }
        case 135: break;
        case 40:
          { return EQ;
          }
        case 136: break;
        case 36:
          { yybegin(IND_STRING);
        return IND_STRING_OPEN;
          }
        case 137: break;
        case 26:
          { return PLUS;
          }
        case 138: break;
        case 60:
          { return BOOL;
          }
        case 139: break;
        case 1:
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 140: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
