{
  parserClass="cc.cflags.nixitch.parser.NixParser"
  parserUtilClass="cc.cflags.nixitch.psi.NixParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Nix"
  psiImplClassSuffix="Impl"
  psiPackage="cc.cflags.nixitch.psi"
  psiImplPackage="cc.cflags.nixitch.psi.impl"

  elementTypeHolderClass="cc.cflags.nixitch.psi.NixTypes"
  elementTypeClass="cc.cflags.nixitch.psi.NixElementType"
  tokenTypeClass="cc.cflags.nixitch.psi.NixTokenType"

  generate=[tokenAccessors="yes"]
  tokens = [
    ASSIGN = '='
    LPAREN = '('
    RPAREN = ')'
    LCURLY = '{'
    RCURLY = '}'
    LBRAC = '['
    RBRAC = ']'
    DOLLAR_CURLY = '${'
    DOLLAR = '$'
    IS = '?'
    NAMED = '@'
    COLON = ':'
    SEMI = ';'
    AND = '&&'
    OR = '||'
    NOT = '!'
    EQ = '=='
    NEQ = '!='
    LEQ = '<='
    GEQ = '>='
    LT = '<'
    GT = '>'
    PLUS = '+'
    MINUS = '-'
    DIVIDE = '/'
    TIMES = '*'
    CONCAT = '++'
    DOT = '.'
    COMMA = ','
    FNUTT = '"'
    IMPL = '->'
    UPDATE = '//'

    ASSERT = 'assert'
    IF = 'if'
    ELSE = 'else'
    THEN = 'then'
    WITH = 'with'
    LET = 'let'
    IN = 'in'
    REC = 'rec'
    OR_KW = 'or'
    ELLIPSIS = '...'
    INHERIT = 'inherit'
    REQUIRE = 'require'
    REQUIRES = 'requires'
    IMPORT = 'import'
    IMPORTS = 'imports'

    SCOMMENT = 'regexp:#[^\r\n]*'
    MCOMMENT = 'regexp:\/\*([^*]|\*[^\/])*\*\/'

    INT = "regexp:[0-9]+"
    BOOL = "regexp:(true|false)"
    ID = "regexp:[a-zA-Z][a-zA-Z_0-9'-]*"

    /* filesystem, relative or absolute */
    PATH = "regexp:[a-zA-Z0-9\.\_\-\+]*(\/[a-zA-Z0-9\.\_\-\+]+)+"
    /* search path, resolve first segment against NIX_PATH */
    SPATH = "regexp:\<[a-zA-Z0-9\.\_\-\+]+(\/[a-zA-Z0-9\.\_\-\+]+)*\>"

    /* home path, resolve to relative users home */
    HPATH = "regexp:\~(\/[a-zA-Z0-9\.\_\-\+]+)+"
    /* somewhere else */
    URI = "regexp:[a-zA-Z][a-zA-Z0-9\+\-\.]*\:[a-zA-Z0-9\%\/\?\:\@\&\=\+\$\,\-\_\.\!\~\*\']+"
  ]
}

nixFile ::= expr

expr ::= expr_function

expr_function ::= ID COLON expr_function
                | expr_if
                | WITH expr SEMI expr_function
                | ASSERT expr SEMI expr_function
                | let_in expr_function
                | lambda COLON expr_function

lambda ::= (fn_lambda formal_set | bn_lambda | formal_set)
let_in ::= LET pure_bind IN

fn_lambda ::= ID NAMED formal_set
bn_lambda ::= formal_set NAMED ID
formal_set ::= LCURLY formals RCURLY

expr_if ::= IF expr THEN expr ELSE expr
          | expr_op

expr_op ::= logical bool_expr* | unary_op logical

left bool_expr ::= bool_op logical
private bool_op ::= AND | OR
logical ::= relative rel_expr*

left rel_expr ::= rel_op relative
private rel_op ::= EQ | NEQ | LEQ | GEQ | GT | LT
relative ::= factor add_expr*

left add_expr ::= add_op factor
private add_op ::= PLUS | MINUS | CONCAT | UPDATE
factor ::= primary mul_expr*

left mul_expr ::= mul_op primary
private mul_op ::= TIMES | DIVIDE | IMPL
primary ::= expr_app

unary_op ::= NOT | MINUS

expr_app ::= expr_select+
expr_select ::= expr_simple ( (cont_path (or_select)?) | OR_KW )?

private cont_path ::= DOT attr_path
private or_select ::= OW_KW expr_select

expr_simple ::=
                literal_simple_string
              | doc_string
                /* Let expressions `let {..., body = ...}' are just desugared
                   into `(rec {..., body = ...}).body'. */
              | LET bind_set
              | REC bind_set
              | literal_list
              | import_stmt
              | literal
              | bind_set
              | eval_expr


eval_expr ::= LPAREN expr RPAREN

bind_set ::= LCURLY binds RCURLY
private literal_list ::= LBRAC expr_list RBRAC
private literal_simple_string ::= FNUTT string_parts FNUTT
private doc_string ::= IND_STRING_OPEN ind_string_parts IND_STRING_CLOSE

expr_list ::= expr_select*;

literal ::= ID | INT | BOOL | PATH | SPATH | HPATH | URI | STR

string_parts ::= (STR | nix_init)*

nix_init ::= DOLLAR_CURLY expr RCURLY {pin=1}

ind_string_parts ::= (IND_STR | nix_init)*

binds ::= ( (require_expr | inherit_attrs | attr_assign) SEMI) +
pure_bind ::= (attr_assign SEMI)+

require_expr ::= (REQUIRE|REQUIRES|IMPORTS) paths_assign

import_stmt ::= IMPORT path_stmt call_args?

call_args ::= LCURLY binds RCURLY {pin=1}

path_assign ::= ASSIGN path_stmt
paths_assign ::= ASSIGN paths_expr
paths_expr ::= LBRAC (path_stmt)+ RBRAC
path_stmt ::= PATH | HPATH | SPATH | literal_simple_string

attr_assign ::= attr_path ASSIGN expr {pin=2}

inherit_attrs ::= INHERIT (LPAREN expr RPAREN)? attrs

attrs ::= attr*

attr_path ::= attr (DOT attr)*

attr ::= ID | OR_KW | FNUTT string_attr FNUTT

string_attr ::= STR
              | nix_init

formals ::= formal (COMMA formal)*

formal ::= ID
         | ID IS expr
         | ELLIPSIS

